// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";

var callWithFinally = ((fn, finallyCb) => {
    try {
      return fn()
    } finally {
      finallyCb()
    }
  });

var context = {
  r: undefined,
  u: undefined,
  q: [],
  v: 0,
  p: undefined,
  n: undefined
};

context.n = (function () {
    var iterator = context.q;
    context.q = [];
    for(var effectsIdx = 0 ,effectsIdx_finish = iterator.length; effectsIdx < effectsIdx_finish; ++effectsIdx){
      var effects = iterator[effectsIdx];
      for(var effectIdx = 0 ,effectIdx_finish = effects.length; effectIdx < effectIdx_finish; ++effectIdx){
        effects[effectIdx]();
      }
    }
  });

function notify() {
  return context.n();
}

function wrapNotify(fn) {
  var prevNotify = context.n;
  context.n = (function () {
      return Curry._1(fn, prevNotify);
    });
}

function make(initial) {
  var valueAct = {
    a: initial,
    v: -1,
    e: [],
    g: undefined,
    s: undefined
  };
  valueAct.g = (function (param) {
      if (valueAct.v !== context.v) {
        valueAct.v = context.v;
        var match = context.u;
        var match$1 = context.r;
        if (match !== undefined) {
          valueAct.e.splice(valueAct.e.indexOf(match), 1);
        } else if (match$1 !== undefined) {
          valueAct.e.push(match$1);
        }
        
      }
      var pubs = context.p;
      if (pubs !== undefined) {
        pubs.push({
              a: valueAct,
              s: valueAct.a
            });
      }
      return valueAct.a;
    });
  valueAct.s = (function (state) {
      valueAct.a = state;
      if (context.q.push(valueAct.e) === 1) {
        Promise.resolve().then(notify);
      }
      valueAct.e = [];
      if (valueAct.v !== context.v) {
        valueAct.v = context.v;
        var match = context.u;
        var match$1 = context.r;
        if (match !== undefined) {
          valueAct.e.splice(valueAct.e.indexOf(match), 1);
        } else if (match$1 !== undefined) {
          valueAct.e.push(match$1);
        }
        
      }
      var pubs = context.p;
      if (pubs !== undefined) {
        pubs.push({
              a: valueAct,
              s: valueAct.a
            });
        return ;
      }
      
    });
  return valueAct;
}

function computed(maybeEqualityCheck, fn) {
  var computedAct = {
    a: undefined,
    v: -1,
    p: [],
    g: undefined,
    s: (function (prim) {
        
      })
  };
  computedAct.g = (function (param) {
      if (computedAct.v !== context.v || context.r === undefined) {
        var computedPubs = computedAct.p;
        var prevPubs = context.p;
        context.p = undefined;
        var isEmptyComputedPubs = computedPubs.length === 0;
        if (isEmptyComputedPubs || computedPubs.some(function (el) {
                return Curry._1(el.a.g, undefined) !== el.s;
              })) {
          var newPubs = isEmptyComputedPubs ? computedPubs : [];
          context.p = newPubs;
          computedAct.p = newPubs;
          var newState = Curry._1(fn, undefined);
          if (computedAct.v === -1 || (
              maybeEqualityCheck !== undefined ? !Curry._2(maybeEqualityCheck, computedAct.a, newState) : true
            )) {
            computedAct.a = newState;
          }
          
        }
        context.p = prevPubs;
        computedAct.v = context.v;
      }
      var pubs = context.p;
      if (pubs !== undefined) {
        pubs.push({
              a: computedAct,
              s: computedAct.a
            });
      }
      return computedAct.a;
    });
  return computedAct;
}

function subscribe(act, cb) {
  var subscribtionContext = {
    q: cb,
    s: cb
  };
  var effect = function () {
    if (subscribtionContext.q === context.q) {
      return ;
    }
    subscribtionContext.q = context.q;
    context.v = context.v + 1;
    var prevRoot = context.r;
    context.r = effect;
    return callWithFinally((function () {
                  var calculatedState = act.g();
                  if (subscribtionContext.s !== calculatedState) {
                    subscribtionContext.s = calculatedState;
                    return Curry._1(cb, calculatedState);
                  }
                  
                }), (function () {
                  context.r = prevRoot;
                }));
  };
  effect();
  return function (param) {
    context.v = context.v + 1;
    context.u = effect;
    act.g();
    context.u = undefined;
  };
}

export {
  make ,
  computed ,
  subscribe ,
  notify ,
  wrapNotify ,
}
/*  Not a pure module */
